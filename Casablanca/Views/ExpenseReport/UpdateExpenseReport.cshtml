@using Casablanca.Models.ViewModel;
@using Casablanca.Models.ExpenseReports;
@using System.Linq;

@{
	ViewBag.Title = "Ajouter des lignes de frais";
}

@model AddExpenseLineVM

@{
	// TODO : add one EL to ER (empty)
	var nbEL = Model.ExpenseReport.ExpenseLines.Count - 1;
	//for(i < nbEl)

	// hidden line : [nbEl]
}

<div class="container">
	<h2 class="text-left">Effectuer une demande de notes de frais </h2>

	<!-- pour ajouter une ligne; faire un bouton plus visible-->
	<div style="padding:20px">
		<button class="btn btn-primary table-add">Ajouter une ligne de frais</button>
	</div>

	@*<span class="table-add glyphicon glyphicon-plus"></span>*@

	@using (Html.BeginForm("UpdateExpenseReport", "ExpenseReport", FormMethod.Post))
	{
		<div id="table" class="table-editable" data-toggle="table" data-search="true">
			<table class="table">
				<thead>
					<tr>
						<th>Type de frais</th>
						<th>Description&nbsp;</th>
						<th>Montant en €</th>
						<th>Mission associée</th>
						<th>Date du frais</th>
						<th>Justificatif</th>
						<th>Supprimer</th>

					</tr>
				</thead>
				<tbody>
					@Html.HiddenFor(model => Model.ExpenseReport.Id)

					@for (int i = 0; i < nbEL; i++)
					{
						<tr>
							<!--Type de frais-->
							<td>
								@Html.DropDownListFor(m => Model.ExpenseReport.ExpenseLines[i].Type,
								(LineType.GetValues(typeof(LineType))).Cast<LineType>().ToList().Select(type => new SelectListItem {
									Text = type.ToString(),
									Value = type.ToString(),
									Selected = (type == Model.ExpenseReport.ExpenseLines[i].Type)
								}))
								@*<select asp-for="Model.ExpenseReport.ExpenseLines[i].Type">
										<optgroup label="Type de frais">
											@foreach (LineType type in LineType.GetValues(typeof(LineType))) {
												if (type == Model.ExpenseReport.ExpenseLines[i].Type) {
													<option value="@type" selected>@type</option>
												}
												else {
													<option value="@type">@type</option>
												}
											}
										</optgroup>
									</select>*@
							</td>

							<!--Description du frais-->
							<td>
								@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Description)
							</td>

							<!--Montant -->
							<td>
								@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Cost,
									new { @class = "required numeric", Value = String.Format("{0:}", Model.ExpenseReport.ExpenseLines[i].Cost) })
							</td>

							<!-- Mission -->
							<td>
								@Html.DropDownListFor(
								   m => Model.ExpenseReport.ExpenseLines[i].Mission.Id,
								   Model.CollaboratorMissions.Select(mission => new SelectListItem {
										Text = mission.Text, Value = mission.Value, Selected =
										(mission.Value == Model.ExpenseReport.ExpenseLines[i].Mission.Id.ToString())}))

								<!--Leçon de vie-->
								@*<select asp-for="Model.ExpenseReport.ExpenseLines[i].Mission.Id">
												<optgroup label="Mission associée">
													@if (Model.CollaboratorMissions.Count == 0) {
														<option value="-1">Aucune mission</option>
													}
													else {
														foreach (var item2 in Model.CollaboratorMissions) {
													if (Model.ExpenseReport.ExpenseLines[i].Mission.Id == item2.Id) {
														<option value="@item2.Id" selected>@item2.Name</option>
													}
													else {
														<option value="@item2.Id">@item2.Name</option>
													}
												}
											}
										</optgroup>
									</select>*@
							</td>

							<!-- Date de la ligne de frais -->
							<td>
								@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Date,
									new { @type = "date", @class = "form-control datepicker", @Value = Model.ExpenseReport.ExpenseLines[i].Date.ToString("yyyy-MM-dd") })
								<!-- ligne 5 copiée d'ici : https://gist.github.com/badcommandorfilename/118012102de8e7201e079e519ee9d135
								Ne pas toucher, magie noire-->
							</td>

							<!-- Justificatif TODO -->
							<td>
								@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Justificatory,
									new { type = "file", @Value = Model.ExpenseReport.ExpenseLines[i].Justificatory, accept = ".pdf" })
								@*<input value="@Model.ExpenseReport.ExpenseLines[i].Justificatory" type="file" asp-for="Model.ExpenseReport.ExpenseLines[0].Justificatory">*@
							</td>

							<!-- Supprimer -->
							<td>
								<span class="table-remove glyphicon glyphicon-remove"></span>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		@Html.HiddenFor(model => Model.SubmitValue)

		<div style="padding:20px">
			<button id="save-btn" type="submit" class="btn btn-primary">Sauvegarder la note de frais</button>
		</div>
		@Html.ValidationSummary("");
	}

	<!-- This is our clonable table line --> @*TODO : asp-for dans ce qui suit*@
	<table id="additionnalrow" hidden>
		<tr class="hide">
			<td>
				@Html.DropDownListFor(m => Model.ExpenseReport.ExpenseLines[nbEL].Type,
				(LineType.GetValues(typeof(LineType))).Cast<LineType>().ToList().Select(type => new SelectListItem {
					Text = type.ToString(),
					Value = type.ToString()
				}))
			</td>
			<td>@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Description, new { @Value = "" })</td>
			<td>
				@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Cost,
											new { @class = "required numeric", Value = String.Format("{0:}", "") })
			</td>
			<td>
				@Html.DropDownListFor(m => Model.ExpenseReport.ExpenseLines[nbEL].Mission.Id, Model.CollaboratorMissions)
			</td>
			<td>
				@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Date,
					new { @type = "date", @class = "form-control datepicker", @Value = "" })
			</td>
			<td>
				@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Justificatory, new { type = "file", @Value = "", accept = ".pdf" })
				@*<input value="@Model.ExpenseReport.ExpenseLines[nbEL].Justificatory" type="file" asp-for="Model.ExpenseReport.ExpenseLines[0].Justificatory">*@
			</td>
			<td>
				<span class="table-remove glyphicon glyphicon-remove"></span>
			</td>
		</tr>
	</table>
</div>


@section Scripts {
	<script>
		// Script to add lines to the ER
		var $TABLE = $('#table');

		$('.table-add').click(function () {
			// Add the line to the view and update line numbers
			var $clone = $("#additionnalrow").find('tr.hide').clone(true).removeClass('hide table-line');
			$TABLE.find('table').append($clone);
			replaceIds();
		});

		// Script to remove lines from the ER
		$('.table-remove').click(function () {
			// Remove a line and update line numbers
			$(this).parents('tr').detach();
			replaceIds();
		});

		// Script to give the right ID to the new line
		var replaceIds = function () {
			var table = $TABLE.find('table').find('tbody');
			// For every row (tr)
			for (var j = 0, tr; tr = table.children("tr")[j]; j++) {
				// For every column (td)
				for (var i = 0, td; td = tr.children[i]; i++) {

					// Except for the glyphicon-remove (last td in every row)
					if (i != tr.children.length - 1) {
						// Change id of the td content
						var idToChange = td.children[0].id;
						td.children[0].id = idToChange.replace(/ExpenseReport_ExpenseLines_[0-9]+/, "ExpenseReport_ExpenseLines_" + j);

						// Change the name of the td content
						var nameToChange = $(td.children[0]).attr("name");
						$(td.children[0]).attr("name", nameToChange.replace(/ExpenseReport\.ExpenseLines\[[0-9]+\]/, "ExpenseReport.ExpenseLines[" + j + "]"));
					}
				}
			}
		};

	</script>
}