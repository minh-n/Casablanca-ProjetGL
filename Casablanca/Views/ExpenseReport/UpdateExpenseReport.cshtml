@using Casablanca.Models.ViewModel;
@using Casablanca.Models.ExpenseReports;
@using System.Linq;

@{
    ViewBag.Title = "Ajouter des lignes de frais";
}

@model AddExpenseLineVM

@{
    // One hidden line at index nbEL
    var nbEL = Model.ExpenseReport.ExpenseLines.Count - 1;
}

<link href="https://afeld.github.io/emoji-css/emoji.css" rel="stylesheet">


<div class="container">
    @if (!Model.ExpenseReport.IsAdvance)
    {
        <h2 class="text-left">Effectuer une demande de notes de frais </h2>
    }
    else
    {
        <h2 class="text-left">Effectuer une avance de notes de frais </h2>
    }


    <div style="padding:15px">
        <button class="btn btn-primary table-add">Ajouter une ligne de frais</button>
    </div>

    @using (Html.BeginForm("UpdateExpenseReport", "ExpenseReport", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div id="table" class="table-editable" data-toggle="table" data-search="true">
            <table class="table">
                <thead>
                    <tr>
                        <th>Type de frais</th>
                        <th>Description&nbsp;</th>
                        @if (Model.ExpenseReport.IsAdvance)
                        {
                            <th>Montant estimé (€)</th>
                        }
                        else
                        {
                            <th>Montant en €</th>
                        }
                        <th>Mission associée</th>
                        @if (!Model.ExpenseReport.IsAdvance)
                        {
                            <th>Date du frais</th>
                        }
                        <th>Justificatif</th>
                        @if (Model.ExpenseReport.Status == ExpenseReportStatus.REFUSED)
                        {
                            <th>Statut du frais</th>
                        }
                        <th> </th>

                    </tr>
                </thead>
                <tbody>
                    @Html.HiddenFor(model => Model.ExpenseReport.Id)

                    @for (int i = 0; i < nbEL; i++)
                    {
                        <tr>
                            @Html.HiddenFor(model => Model.ExpenseReport.ExpenseLines[i].IsAdvance)

                            <!--Type de frais-->
                            @if (!Model.ExpenseReport.IsAdvance && Model.ExpenseReport.ExpenseLines[i].IsAdvance)
                            {
                                <td>
                                    @Html.DropDownListFor(model => Model.ExpenseReport.ExpenseLines[i].Type,
                                    (LineType.GetValues(typeof(LineType))).Cast<LineType>().ToList().Select(type => new SelectListItem {
                                        Text = type.ToString(),
                                        Value = type.ToString(),
                                        Selected = (type == Model.ExpenseReport.ExpenseLines[i].Type)
                                    }), new { @disabled = "disabled" })
                                    
                                    @Html.HiddenFor(model => Model.ExpenseReport.Id)
                                </td>
                            }
                            else
                            {
                                <td>
                                    @Html.DropDownListFor(model => Model.ExpenseReport.ExpenseLines[i].Type,
                                    (LineType.GetValues(typeof(LineType))).Cast<LineType>().ToList().Select(type => new SelectListItem {
                                        Text = type.ToString(),
                                        Value = type.ToString(),
                                        Selected = (type == Model.ExpenseReport.ExpenseLines[i].Type)
                                    }))
                                </td>
                            }
                            

                            <!--Description du frais-->
                            @if (!Model.ExpenseReport.IsAdvance && Model.ExpenseReport.ExpenseLines[i].IsAdvance)
                            {
                                <td>

                                    @Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Description, new {@readonly = "readonly"})
                                </td>
                            }
                            else
                            {
                                <td>
                                    @Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Description)
                                </td>
                            }

                            <!--Montant -->
                            <td>
                                @Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Cost,
                                    new { @class = "required numeric", Value = String.Format("{0:}", Model.ExpenseReport.ExpenseLines[i].Cost) })

                                @Html.HiddenFor(model => Model.ExpenseReport.ExpenseLines[i].Cost, new { @Value = "@Model.ExpenseReport.ExpenseLines[i].Cost" })
                            </td>

                            <!-- Mission -->
                            @if (!Model.ExpenseReport.IsAdvance && Model.ExpenseReport.ExpenseLines[i].IsAdvance)
                            {
                                <td>
                                    @Html.DropDownListFor(
                                    model => Model.ExpenseReport.ExpenseLines[i].Mission.Id,
                                    Model.CollaboratorMissions.Select(mission => new SelectListItem {
                                        Text = mission.Text,
                                        Value = mission.Value,
                                        Selected = (mission.Value == Model.ExpenseReport.ExpenseLines[i].Mission.Id.ToString())}), new { @disabled = "disabled" })
                                    
                                    @Html.HiddenFor(model => Model.ExpenseReport.ExpenseLines[i].Mission.Id)
                                </td>
                            }
                            else
                            { 
                                 <td>
                                    @Html.DropDownListFor(
                                    model => Model.ExpenseReport.ExpenseLines[i].Mission.Id,
                                    Model.CollaboratorMissions.Select(mission => new SelectListItem {
                                        Text = mission.Text,
                                        Value = mission.Value,
                                        Selected = (mission.Value == Model.ExpenseReport.ExpenseLines[i].Mission.Id.ToString())}))
                                </td>
                            }
                           

                            <!-- Date de la ligne de frais -->
                            @if (!Model.ExpenseReport.IsAdvance)
                            {
                                <td>

                                    @{
                                        @Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[i].Date,
										new {
											@type = "date", @class = "form-control datepicker",
											@Value = Model.ExpenseReport.ExpenseLines[i].Date.ToString("yyyy-MM-dd"),
											@style = "padding:0px; height:26px"
											//@min = Model.ExpenseReport.ExpenseLines[i].Mission.StartDate.ToString("yyyy-MM-dd"),
											//@max = Model.ExpenseReport.ExpenseLines[i].Mission.EndDate.ToString("yyyy-MM-dd")
										})

                                    }


                                </td>
                            }


                            <!-- Justificatif -->
                            <td>
                                @if (Model.ExpenseReport.ExpenseLines[i].Justificatory != "")
                                {
                                    <a href="~/ExpenseReport/FilePathDownload?fileName=@Model.ExpenseReport.ExpenseLines[i].Justificatory">@Html.DisplayFor(model => Model.ExpenseReport.ExpenseLines[i].Justificatory)</a>
                                }

                                @Html.TextBoxFor(model => Model.file, new { type = "file", @Value = "", accept = ".pdf" })

                                </td>

                            <!-- Statut de la ligne de frais (uniquement quand l'ER a déjà été refusée) -->
                            @if (Model.ExpenseReport.Status == ExpenseReportStatus.REFUSED)
                            {
                                <td>
                                    @if (Model.ExpenseReport.ExpenseLines[i].Treated == Treatment.COMPTA)
                                    {
                                        if (Model.ExpenseReport.ExpenseLines[i].FinalValidation)
                                        {
                                            <text>Validée compta</text>
                                        }
                                        else
                                        {
                                            <text>Refusée compta</text>
                                        }
                                    }
                                    else if (Model.ExpenseReport.ExpenseLines[i].Treated == Treatment.CDS)
                                    {
                                        if (Model.ExpenseReport.ExpenseLines[i].Validated)
                                        {
                                            <text>Validée CDS</text>
                                        }
                                        else
                                        {
                                            <text>Refusée CDS</text>
                                        }
                                    }
                                    else
                                    {
                                        <text>Non traitée</text>
                                    }
                                </td>
                            }

                            <!-- Supprimer -->
							<td>
								<button class="table-remove btn btn-primary" style="padding:2px">Supprimer</button>
							
								@*<span class="table-remove fa fa-remove"></span>*@
							</td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
        @Html.HiddenFor(model => Model.SubmitValue)
        if (!Model.ExpenseReport.IsAdvance)
        {
            <div style="padding:20px">
                <button id="save-btn" type="submit" class="btn btn-primary">Sauvegarder la note de frais</button>
            </div>
        }
        else
        {
            <div style="padding:20px">
                <button id="save-btn" type="submit" class="btn btn-primary">Sauvegarder l'avance</button>
            </div>
        }
        @Html.ValidationSummary("");
    }

     <div id="informations">
        @if (!Model.ExpenseReport.IsAdvance)
         {
            <div>
                Montant total de la note : <label id="montant">0</label> €
            </div>
        }
        else
        {
            <div>
                Montant total de l'avance : <label id="montant">0</label> €
            </div>
        }
     </div>

    <!-- This is our clonable table line -->
    <table id="additionnalrow" hidden>
		<tr class="hide">
			<td>
				@Html.DropDownListFor(m => Model.ExpenseReport.ExpenseLines[nbEL].Type,
				(LineType.GetValues(typeof(LineType))).Cast<LineType>().ToList().Select(type => new SelectListItem {
					Text = type.ToString(),
					Value = type.ToString()
				}))
			</td>


			<!--Description -->
			<td>@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Description, new { @Value = "" })</td>


			<!--Montant -->
			<td>
				@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Cost,
											new { @class = "required numeric", Value = String.Format("{0:}", "")
											})
			</td>
			<td>
				@*@Html.DropDownListFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Mission.Id, Model.CollaboratorMissions)*@
				@Html.DropDownListFor(
									m => Model.ExpenseReport.ExpenseLines[nbEL].Mission.Id,
									Model.CollaboratorMissions.Select
									(mission =>
										new SelectListItem {
											Text = mission.Text,
											Value = mission.Value,
											Selected = (mission.Value == Model.CollaboratorMissions.FirstOrDefault().Value)
										}
									),
									new { style = "width:120px; height:26px" }
				)
			</td>
			@if (!Model.ExpenseReport.IsAdvance)
			{
				<td>
					@{
						@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Date,
						new {
							@type = "date", @class = "form-control datepicker",
							@Value = Model.ExpenseReport.ExpenseLines[nbEL].Date.ToString("yyyy-MM-dd"),
							@style = "padding:0px; height:26px" 
						}
						)

					}
				</td>
			}

                <td>
                    @*@Html.TextBoxFor(model => Model.ExpenseReport.ExpenseLines[nbEL].Justificatory, new { type = "file", @Value = "", accept = ".pdf" })*@
                    @Html.TextBoxFor(model => Model.file, new { type = "file", @Value = "", accept = ".pdf" })
                
                </td>
			@if (Model.ExpenseReport.Status == ExpenseReportStatus.REFUSED)
			{
				<td>
					<text> Refusée</text>
				</td>
			}
			<td>
				<button class="table-remove btn btn-primary" style="padding:2px">Supprimer</button>
			</td>
		</tr>
    </table>
</div>

@{
    // Magic by Morgan, do not touch
    int toRemove = (@Model.ExpenseReport.Status == ExpenseReportStatus.REFUSED ? 2 : 1);
}


@section Scripts {
    <script>
        // Script to add lines to the ER
        var $TABLE = $('#table');
        var table = $TABLE.find('table').find('tbody');
        var toRemove = @toRemove;

		var AddLine = function () {
			// Add a line to the view and update line numbers
			var $clone = $("#additionnalrow").find('tr.hide').clone(true).removeClass('hide table-line');
			$TABLE.find('table').append($clone);
			replaceIds();
		}

		$('.table-add').click(AddLine);

        $('.table-remove').click(function () {
            // Remove a line and update line numbers
            $(this).parents('tr').detach();
            replaceIds();
            computeTotalAmount();
        });

        // Script to give the right ID to the new line
        var replaceIds = function () {
            // For every row (tr)
            for (var j = 0, tr; tr = table.children("tr")[j]; j++) {
                // For every column (td)
                for (var i = 0, td; i < (tr.children.length - toRemove); i++) {
                    td = tr.children[i];

                    // Except for the fa-remove and status (two last td in every row), change id of the td content 
                    var idToChange = td.children[0].id;
                    td.children[0].id = idToChange.replace(/ExpenseReport_ExpenseLines_[0-9]+/, "ExpenseReport_ExpenseLines_" + j);

                    // Change the name of the td content
                    var nameToChange = $(td.children[0]).attr("name");
                    $(td.children[0]).attr("name", nameToChange.replace(/ExpenseReport\.ExpenseLines\[[0-9]+\]/, "ExpenseReport.ExpenseLines[" + j + "]"));

                    if (i == 2) {
                        td.children[0].addEventListener("input", function (e) {
                            computeTotalAmount();
                        });
                    }
                }
            }
        };


        // Visual syntaxic sugar
        var computeTotalAmount = function () {
            var totalAmount = 0;

            for (var j = 0; j < table.children("tr").length; j++) {
                var amount = table.find("#ExpenseReport_ExpenseLines_" + j + "__Cost").val();
                if (amount != "" && amount != undefined) {
                    totalAmount += parseFloat(amount.replace(',', '.'));
                }
            }

            $("#montant").text(totalAmount.toFixed(2));
        };

        // Start-up scripts
		computeTotalAmount();

		if (@nbEL == 0) {
			AddLine();
		}
    </script>
}